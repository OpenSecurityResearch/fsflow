package com.foundstone.fsflow.app;

import com.foundstone.fsflow.lib.CallFlow;
import com.foundstone.fsflow.lib.CallMachine;
import com.foundstone.fsflow.lib.CallSerializer;
import com.thoughtworks.xstream.XStream;
import java.io.IOException;
import javax.annotation.concurrent.NotThreadSafe;
import javax.swing.text.html.HTMLDocument;

/**
 */
@NotThreadSafe
public class Main extends javax.swing.JFrame {
       
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    negativeResponseButton = new javax.swing.JButton();
    positiveResponseButton = new javax.swing.JButton();
    recoveryModeButton = new javax.swing.JButton();
    bustedButton = new javax.swing.JButton();
    callBlockTitle = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    textPane = new javax.swing.JEditorPane();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setBackground(new java.awt.Color(60, 60, 60));

    jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(255, 255, 255));
    jLabel1.setText("FSFlow - Social Engineering Call Flow");

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .add(14, 14, 14)
        .add(jLabel1)
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .add(20, 20, 20)
        .add(jLabel1)
        .addContainerGap(24, Short.MAX_VALUE))
    );

    negativeResponseButton.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
    negativeResponseButton.setForeground(new java.awt.Color(204, 0, 51));
    negativeResponseButton.setText("Negative Response");
    negativeResponseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        negativeResponseButtonActionPerformed(evt);
      }
    });

    positiveResponseButton.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
    positiveResponseButton.setForeground(new java.awt.Color(0, 153, 0));
    positiveResponseButton.setText("Positive Response");
    positiveResponseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        positiveResponseButtonActionPerformed(evt);
      }
    });

    recoveryModeButton.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
    recoveryModeButton.setForeground(new java.awt.Color(204, 0, 51));
    recoveryModeButton.setText("Recovery Mode");
    recoveryModeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        recoveryModeButtonActionPerformed(evt);
      }
    });

    bustedButton.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
    bustedButton.setForeground(new java.awt.Color(51, 51, 51));
    bustedButton.setText("Busted!");
    bustedButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bustedButtonActionPerformed(evt);
      }
    });

    callBlockTitle.setText("jLabel2");

    textPane.setMargin(new java.awt.Insets(20, 20, 20, 20));
    jScrollPane2.setViewportView(textPane);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(recoveryModeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(layout.createSequentialGroup()
            .add(negativeResponseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 384, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(positiveResponseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 373, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(callBlockTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(jScrollPane2))
        .addContainerGap())
      .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
          .addContainerGap()
          .add(bustedButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
          .addContainerGap()))
    );

    layout.linkSize(new java.awt.Component[] {negativeResponseButton, positiveResponseButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .add(18, 18, 18)
        .add(callBlockTitle)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(positiveResponseButton)
          .add(negativeResponseButton))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 73, Short.MAX_VALUE)
        .add(recoveryModeButton)
        .add(44, 44, 44))
      .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
          .addContainerGap(344, Short.MAX_VALUE)
          .add(bustedButton)
          .add(95, 95, 95)))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void positiveResponseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positiveResponseButtonActionPerformed
    machine.positiveResponse();
    setCurrentState(machine);
  }//GEN-LAST:event_positiveResponseButtonActionPerformed

  private void negativeResponseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeResponseButtonActionPerformed
    machine.negativeResponse();
    setCurrentState(machine);
  }//GEN-LAST:event_negativeResponseButtonActionPerformed

  private void recoveryModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recoveryModeButtonActionPerformed
    machine.recoveryResponse();
    setCurrentState(machine);
  }//GEN-LAST:event_recoveryModeButtonActionPerformed

  private void bustedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bustedButtonActionPerformed
    machine.busted();
    setCurrentState(machine);
  }//GEN-LAST:event_bustedButtonActionPerformed

  ///////////////////////////// Class Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 
  private final HTMLDocument textDoc = new HTMLDocument();
  
  private CallMachine machine = null;
  
  ////////////////////////////// Class Methods \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  public static void main(String args[]) throws IOException {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        Main main = new Main();        
        XStream x = CallSerializer.createStream();
        CallFlow flow = CallFlow.class.cast(x.fromXML(Main.class.getResourceAsStream("/testFlow.xml")));
        CallMachine m = new CallMachine(flow);
        main.setCurrentState(m);
        main.setVisible(true);
      }
    });
  }
  
  //////////////////////////////// Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton bustedButton;
  private javax.swing.JLabel callBlockTitle;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JButton negativeResponseButton;
  private javax.swing.JButton positiveResponseButton;
  private javax.swing.JButton recoveryModeButton;
  private javax.swing.JEditorPane textPane;
  // End of variables declaration//GEN-END:variables
     
  /////////////////////////////// Constructors \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  

  public Main() {
    initComponents();    
    textPane.setDocument(textDoc);
    textPane.setContentType("text/html");
  }
  
  ////////////////////////////////// Methods \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  /**
   * Set the UI to the state existing in the provided state machine.
   * @param machine The state machine to set the UI to.
   */
  public void setCurrentState(CallMachine machine) {    
    this.machine = machine;   
    updateState();
    
  }
  
  //------------------------ Implements:
  
  //------------------------ Overrides:
  
  //---------------------------- Abstract Methods -----------------------------
  
  //---------------------------- Utility Methods ------------------------------
  
  private void updateState() {

    updateText();
    
    boolean busted = machine.isBusted();
    
    negativeResponseButton.setEnabled(!busted && machine.getNegativeResponse() != null);
    positiveResponseButton.setEnabled(!busted && machine.getPositiveResponse() != null);
    recoveryModeButton.setEnabled(!busted && machine.getRecoveryResponse() != null);
    bustedButton.setEnabled(!busted);    
  }
  
  private void updateText() {
    
    // Title
    if(machine.isBusted()) {
      callBlockTitle.setText("Busted!");            
    } else {
      callBlockTitle.setText(machine.getCurrentCallBlock().getName());
    }
    
    
    // Text
    if (machine.isBusted() && machine.getBustedCallBlock() != null && machine.getBustedCallBlock().getStatement() != null) {
      setText(machine.getBustedCallBlock().getStatement().getValue());
    } else if (machine.getCurrentCallBlock() != null && machine.getCurrentCallBlock().getStatement() != null) {
      setText(machine.getCurrentCallBlock().getStatement().getValue());    
    } else {
      setText("[No statement provided]");      
    }
    
  }
  
  private void setText(String text) {
    textPane.setText("<html><center>" + text + "</center></html>");
  }
  
  //---------------------------- Property Methods -----------------------------
}
