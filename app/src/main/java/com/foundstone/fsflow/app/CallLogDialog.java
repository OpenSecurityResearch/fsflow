package com.foundstone.fsflow.app;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.concurrent.NotThreadSafe;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

@NotThreadSafe
public class CallLogDialog extends javax.swing.JDialog {
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")

  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    logPane = new javax.swing.JEditorPane();
    copyButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    logPane.setPreferredSize(new java.awt.Dimension(640, 400));
    jScrollPane1.setViewportView(logPane);

    copyButton.setText("Copy to clipboard");
    copyButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        copyButtonActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(0, 0, Short.MAX_VALUE)
            .add(copyButton)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(copyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
    StringSelection stringSelection = null;
    try {
      stringSelection = new StringSelection (doc.getText(0, doc.getLength()));
    } catch (BadLocationException ex) {
      Logger.getLogger(CallLogDialog.class.getName()).log(Level.SEVERE, null, ex);
    }
    Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
    clpbrd.setContents (stringSelection, null);
  }//GEN-LAST:event_copyButtonActionPerformed

  ///////////////////////////// Class Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  ////////////////////////////// Class Methods \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  //////////////////////////////// Attributes \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton copyButton;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JEditorPane logPane;
  // End of variables declaration//GEN-END:variables

  private final SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss Z");
  
  private final PlainDocument doc = new PlainDocument();
  
  /////////////////////////////// Constructors \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  
  
  public CallLogDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    logPane.setDocument(doc);
  }
  
  ////////////////////////////////// Methods \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  public void log(String message) {
    try {
      doc.insertString(doc.getLength(), "[" + formatDate() + "] " + message + "\n", null);
    } catch (BadLocationException ex) {
      Logger.getLogger(CallLogDialog.class.getName()).log(Level.SEVERE, null, ex);
    }
  }
  
  public void clearLog() {
    logPane.setText("");
    log("Log Initialized");
  }
  
  //------------------------ Implements:
  
  //------------------------ Overrides:
  
  //---------------------------- Abstract Methods -----------------------------
  
  //---------------------------- Utility Methods ------------------------------
  
  private String formatDate() {
    return formatter.format(new Date());
  }
  
  //---------------------------- Property Methods -----------------------------     



}
